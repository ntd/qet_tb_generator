#!/usr/bin/env python3
# encoding: utf-8

#---------|---------|---------|---------|---------|---------|---------|---------|
# Copyright (C) 2018 Raul Roda <raulroda@yahoo.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#---------|---------|---------|---------|---------|---------|---------|---------|


#
# Este proyecto permite dibujar borneros partiende de un esquema del software QElectrotech.
# Los borneros dibujados se añaden a la sección xml del fichero .qet: 
#  <collection>
#    <category name="import">
#
#
# Se buscan todos los bornes en el esquema. Los bornes son elementos del tipo TERMINAL. 
# Además deben tener un 'label' de tipo X1:3. 
#
#
# Hay configuración que afecta a cada borne y otra que afecta a todo el bornero.
# Toda la configuración se guarda en el campo 'function' de cada elemento de QET.
# Ese campo es accesible desde <elementInformation name="function"> de cada borne. 
# La configuración se guarda como una cadena de texto, con unos TAGS que sirven
# para identificar cada uno de los parámetros.
#   Ejemplo:
#       <elementInformation name="function">
#           %p2%tSTANDARD%c%n%b
#       </elementInformation>    
# Todos los bornes de un mismo bornero, tiene la misma configuración arriba
# mencionada, de forma que si se borra un borne  quedará algun otro borne de ese
# bornero del que extraer la configuración
#
#
#
# La info leida para cada borne se almacen en la variable global 'data'.
# Esta variable tiene un key para cada bornero y luego una lista con la config
# de cada terminal. La variable 'data' tambien tendra una variable de tipo
# 'tk' que nos permitirá enlazar con el valor de los widgets del GUI
#   {
#       borne_id1: [ {term1}, {term2}, ... ]
#       borne_id2: [ {term1}, {term2}, ... ]
#       borne_id3: [ {term1}, {term2}, ... ]
#   }
# Para cada terminal hay configuración propia y configuración del bornero entero.
# En la siguiente lista se muestran las variables que enlazan con los TK widgets
# y  el TAG con el que se guarda cada valor en el XML del esquema. 
#   {
#     'uuid': From QET. identificador of the terminal in the QET xml file,
#     'block_name': From QET.terminal block that belong the terminal,
#     'terminal_name': From QET.
#     'terminal_xref': Calculated from QET,
#     'cable': From QET,
#
#     'terminal_pos %p': From Plugin. For sortering purposes,
#     'terminal_type %t': From Plugin. STANDARD, GROUND, FUSE. For representing purposes,
#     'hose %h': From Plugin. Name of the cable of the electric hose,
#     'conductor %n': From Plugin. Name of the electric hose,
#     'bridge %b: From Plugin. True/False for a bridge to next terminal
#     'num_reserve %r': Config for entire terminal block. Num of reserve terminals
#     'reserve_positions %z': Config for entire terminal block. Position for the
#           reserve terminals. Not used for now
#     'size %s': number of terminals per page
#   }
#
#
# Los borneros creados en el XML del esquema QET se nombran según TB_x##y.elmt
# donde:
#   x: es el nombre del bornero (X1, X34, -XL3,...)
#   y: es un número direfente para el mismo bornero que se he troceado para que
#      quepa en una página.



## Imports
import logging as log
import os
import re
import shutil
import sys
import json
from functools import cmp_to_key
#~ import lxml.etree as etree  # python3-lxml
from operator import itemgetter as i

import PySimpleGUI as sg

from src.qetproject import QETProject
from src.terminalblock import TerminalBlock

## Globals (allows access from callbacks events)
edited_terminals = []  # to propose the terminal-blocks to create
qet_file = ''  # schema file

# CONSTANTS
ALL = '-- ALL --'
THEME = 'SystemDefaultForReal'  # pysimplegui
VERSION = '1.2.5'
FECHA = 'May, 2020'
TITLE = 'QET Terminal Block Generator - v{}'.format(VERSION)
STRIP_LONG = 30
SEP = '%'  # separator of info in the metadata field
CONFIG_FILE = 'qet_tb_generator.json'
CONFIG_UI_INPUT_FIELDS_KEYS = [ '-CFG_SPLIT-', '-CFG_A-', '-CFG_B-', '-CFG_C-', \
    '-CFG_D-', '-CFG_E-', '-CFG_F-', '-CFG_G-', '-CFG_H-', '-CFG_I-', '-CFG_J-', \
    '-CFG_HEAD_FONT-', '-CFG_TERMINAL_FONT-', '-CFG_XREF_FONT-', '-CFG_CONDUCTOR_FONT-']


# UI CONSTANTS. 
# - key is the dict id of the terminals list getted from QETproject
# - the extra info with no column asigned are stored as metadata in
#   the first CELL of every row: uuid, num_reserve, reserve_positions, size
# - tip: shows when mouse over header
# - Edit: True to create a Input instead of a Text
# - Disabled: True to disable events
TABLE = [
    {'col':0, 'text':'ORDER', 'size':8, 'edit': False, 'disabled': False, 'key': '', 'tip': 'Click to move up/down the terminal'},  # UP/DW buttons
    {'col':1 , 'text':'POS.', 'size':6, 'edit': False, 'disabled': True, 'key': 'terminal_pos', 'tip': 'Position of the terminal in the terminal-block'},
    {'col':2 , 'text':'BLOCK', 'size':10, 'edit': False, 'disabled': True, 'key': 'block_name', 'tip': "Terminal-block's name (comes from the schema)"},
    {'col':3 , 'text':'ID', 'size':8, 'edit': False, 'disabled': True, 'key': 'terminal_name', 'tip': "Terminal's label (comes from the schema)"},
    {'col':4 , 'text':'XREF', 'size':9, 'edit': False, 'disabled': True, 'key': 'terminal_xref', 'tip': "Terminal's place (comes from the schema)"},
    {'col':5 , 'text':'CABLE', 'size':10, 'edit': False, 'disabled': True, 'key': 'cable', 'tip': "Cable's name connected to the terminal (comes from the schema)"},
    {'col':6 , 'text':'BRIGE?', 'size':8, 'edit': False, 'disabled': False, 'key': 'bridge', 'tip': 'If selected, a bridge will be drawn between the terminal and the next one'},
    {'col':7 , 'text':'TYPE', 'size':11, 'edit': False, 'disabled': False, 'key': 'terminal_type', 'tip': 'Defines the graphical representation of the terminal'},
    {'col':8 , 'text':'HOSE', 'size':18, 'edit': True, 'disabled': False, 'key': 'hose', 'tip': "Hose's name the conductor belongs to. Several terminals can share hose (i.e. -W1, -WXL12,...)"},
    {'col':9 , 'text':'CONDUCTOR', 'size':14, 'edit': True, 'disabled': False, 'key': 'conductor', 'tip': "Conductor's name of the hose (i.e. 1, br, yellow, ...)"}
]

HELP = """
Terminal Block generator plug-in for QElectrotech
https://qelectrotech.org/


Steps:
  - In QET, optional: Choose Project> Clean Project.
  - In QET: Close and reopen the project.
  - In QET: Start the plugin. Choose 'Start the terminal block creation plug-in' in the project menu.
  - In this plug-in: Edit the terminals info.
  - In this plug-in: Press the 'CREATE TERMINAL BLOCKS' button.
  - In QET:  Close without saving project (very important) and reopen the project.
  - In QET: Under the 'COLLECTIONS' tree of the project, all the terminal blocks appear.


Considerations for creating a terminal block from a diagram.
  - This addon searches all the elements of type 'Terminal'.
  - Normally, the terminal elements appear filtering by 'terminal'.
  - Terminals must have a tag such as <terminal_block_name>: <terminal_name>. For example: -X1: 1, X34: +, X1: 23, Y3: R, ...
  - All terminals with the same <terminal_block_name> are grouped and displayed in a tab in this add-on.
  - You can also specify the hose and the conductor connected at the bottom of every terminal (columns 'HOSE' and 'CONDUCTOR').
  - There are 3 types of terminals that you can specify in the 'TYPE' column (standard, ground, fuse)
  - The 'BRIDGE' column indicates if there is a bridge from the current to the next terminal.
 

Created by raulroda8@gmail.com
"""


ICON = b'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAA4xJREFUeJztWj9L+0AYfu5MrDaKKX4DF8FJUEQ6OLk7OAvFL9HJ0d3N3a8hurgIHYprBxUklopgi6FG2uZ+U/NrmuTSXP5cbPNAh96b982Th/fPXRvCGGNYYFDZBGSjEEA2AdkoBJBNQDYKAWQTkI1CANkEZGPhBVCSCHJxcYHHx0fPumVZ+Pn5QaVSgW3b6PV6obG+vr5gWRZWVlY8tuFwiF6vB0VRYNu2y2bbNlZXV9FutyNxjy1Ap9NBo9FAvV732O7u7hwbpRQbGxuO7erqCtVqFQcHBy6f5eVlVKtVPDw8eOI1m01cXl7i9vYWlLqTt9VqoVarReYfW4But4vX11ccHx97bJ1OB29vb7620WgEXdext7fnWjdNEwCwtbXl8fn4+ECpVMLm5qbHpus6RM51sXsAISTwxiI2SqknvcdgjIEQ4mvj+fEgTYBAQoIPInIvoMgAeWNQRAAeFqIEcpkBSZcAz4cngGgP4I5B27ZxeHgI0zShaRp0XYemaTAMA41GIzS4qAAA/2H9IJoBXAGGwyGenp7QbDbR7/fR7Xbx/f2N09NTF+EkSwD4/zBLS0uu9TRKgCvAOOjOzo6LxCREH5LnFyTALFyjgtsD/IJOE0+6BwTdF0inB0QWIAqSFoCH1KaAH9HJtTR7wDSkjMGwMvjrJRB6GgxqSOfn53h+fkar1XJOcFGQlzPEzAJMghCCo6Mj1Go1lMtl11icvi7vJSAkAKUUZ2dnUFUVhmFkVgJRec7kJxJ4nnpAbAF4SLoEkvYBUh6DUeM6pPI+BieRZQnE4RnoJxK46AGSekBuSiDtDBARbuwTeQMVekGIAKZpJv4rrkgGjP2iCiC0ERqNRtjf34dhGM53P2Q5Bif9pv814vqEXUAI8ZBRFAU3Nzd4f3/Hy8sLNE0L9M2qCfL8eJipBKaJUkqxvb2N9fX13IzBsJhBkNYEo94TkJgBcX4VCsKfKoG8bIREuIb6iATN404wLGYQcrkTzHJ8hu4DPj8/sbu7C8uynDVVVZ1Zm6cMSEWAdruNwWCAcrnsa8/yOByGVARQVRWqqgba8zQGU+kBcTAXUyAMf70H5O4FCWCOSoCHhS8B3tk9yxIAi4nf31+mKAoDIO2ztrbGKpUKo5Sy6+vrSPwJEynSnME0TQwGA9zf3+Pk5ASKMvsLsHMhQBws/OvyhQCyCchGIYBsArJRCCCbgGz8A8M+BcbRRKw4AAAAAElFTkSuQmCC'

LEGEND_PICTURE = ""



def get_QET_fullpath(default=""):
    """
    Returns the QET project file from command line or from file dialog
    """

    if len(sys.argv) == 1:  # first data is the prg name
        f = sg.popup_get_file("Choose a diagram QET file", \
                title = TITLE, \
                default_path = default, \
                file_types = (("QET Files", '*.*'),),
            )
    else:
        f =  sys.argv[1]
    log.info('Using the file: {}'.format(f))

    if not f:
        return None
    
    if os.path.isfile(f):
        return f
    else:
        log.info('File {} does not exit'.format(f))
        return None




def initialize_logger():
    logger = log.getLogger()
    logger.setLevel(log.DEBUG)
     
    # console
    handler = log.StreamHandler()
    handler.setLevel(log.DEBUG)
    formatter = log.Formatter( \
            '%(asctime)s %(levelname)-8s %(message)s [%(module)s.%(funcName)s:%(lineno)i]', '%H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
 
    # error file
    #handler = log.FileHandler(os.path.join(output_dir, "error.log"),"a", encoding=None, delay="true")
    #handler.setLevel(log.ERROR)
    #formatter = log.Formatter("%(asctime)s %(levelname)-8s %(message)s [%(module)s.%(funcName)s:%(lineno)i]")    
    #handler.setFormatter(formatter) 
    #logger.addHandler(handler)
 
    # log file
    #handler = log.FileHandler(os.path.join(output_dir, "all.log"),"a")
    #handler.setLevel(log.INFO)
    #formatter = log.Formatter("%(asctime)s %(module)-12s %(levelname)-8s %(message)s")
    #handler.setFormatter(formatter)
    #logger.addHandler(handler)



def choose_tb_to_create(tb_names, edited_terminals):
    """
    Shows a windows with a list of terminal-blocks preselecting
    the edited.
    If the user chooses -- ALL --, return the full list of names
    """
    msg = ("Select the terminal-blocks that \n"
           "you want to insert as elements\n"
           "in your schema. The edited\n"
           "terminal-blocks are preselected.")

    layout = [
        [sg.Text(msg)],
        [
            sg.Listbox(values=[ALL] + tb_names, \
                    default_values=edited_terminals, \
                    size=(30,20), \
                    enable_events=False, \
                    select_mode='multiple', \
                    key='-TB-')
        ],
        [sg.OK(), sg.Cancel()]
    ]

    window = sg.Window(TITLE, layout, modal=True)
    event, values = window.read()
    window.close()

    if event == 'OK':
        if ALL in values['-TB-']:
            return tb_names
        else:
            return values['-TB-']
    else:
        return []    



def backup_diagram():
    """ Backup the diagram WET file to a new filename adding a increment
    suffix"""

    # find new backup filename
    i = 1
    full_back_path = qet_file[:qet_file.rfind('.')] + '_' + str(i) + '.qet' 
    while os.path.isfile( full_back_path) or \
            os.path.isdir( full_back_path ) :
        i += 1
        full_back_path = qet_file[:qet_file.rfind('.')] + '_' + str(i) + '.qet' 
    
    # backup    
    shutil.copyfile(qet_file, full_back_path)
    return full_back_path




def add_to_edited_tb(memo_list, tb_name):
    """
    Memorize the edited terminal blocks to preselect them in the list 
    of terminal-blocks to create in the schema.
    """
    if not tb_name in memo_list:
        memo_list.append(tb_name)



def create_a_TB(tb_name, tb, slice_num, tb_splitted, settings, qet_project):
    """
    Creates a TB getted from the choosed TB to create by the user

    param tb_name: name of the TB
    param tb: list of terminals
    param tb_slice: num of the slice. Starts from 1.
    param tb_splitted: True if the TB have several parts
    param settings: a dict with the settings defined in the UI
    param qet_project: the object representing the XML tree
    """

    # The TB Head
    if tb_splitted:
        head_text = "{}({})".format( tb_name, slice_num )
    else:
        head_text = "{}".format( tb_name )

    print ( "Generating TB {}\n\n".format( tb_name ) )
    
    # Generating the XML element and inserting into the QET Project XML tree.
    a_block = TerminalBlock( head_text, tb, settings)
    qet_project.insert_tb(head_text, a_block.drawTerminalBlock())



def create_terminal_blocks(window, tb_list, max_tb_length, settings, qet_project):
    """
    Extract the data from the gui, generates the element component
    (the terminal block draw) and saves them to the original file project.

    Longs TB are splited into multiple elements.

    @param tb_list: list of terminal names to generate the QET element. 
        Exits if empty.
    @param (int)max_tb_length: to split terminal-blocks if has a lot of terminals
    @param settings: a dict with the settings
    @param qet_project: object
    """

    if not tb_list:
        return

    ## Loop selected blocks. Extract data from gui for a every terminal block
    full_back_path = backup_diagram()
    
    # Convert data from UI to dicts
    tb_from_ui = []  # list of dicts. Every dict is a terminal  
    for row in range(len(qet_project.terminals)):
        term = {}
        term['uuid'] = window[ '-1/{}-'.format(row) ].metadata
        term['block_name'] = window[ '-2/{}-'.format(row) ].get()
        term['terminal_name'] = window[ '-3/{}-'.format(row) ].get()
        term['terminal_xref'] = window[ '-4/{}-'.format(row) ].get()
        term['cable'] = window[ '-5/{}-'.format(row) ].get()
        term['terminal_pos'] = window[ '-1/{}-'.format(row) ].get()
        term['terminal_type'] = window[ '-7/{}-'.format(row) ].get()
        term['hose'] = window[ '-8/{}-'.format(row) ].get()
        term['conductor'] = window[ '-9/{}-'.format(row) ].get()
        term['bridge'] = window[ '-6/{}-'.format(row) ].get()
        #term['num_reserve'] = full_tb[-1]['num_reserve']
        #term['reserve_positions'] = full_tb[-1]['reserve_positions']
        tb_from_ui.append(term)

    # Filter the selected TB
    filtered_tb = [ t for t in tb_from_ui if t['block_name'] in tb_list]

    # Extract terminals until the list is empty
    memo_tb_name = filtered_tb[0]['block_name']
    current_tb = []
    tb_done = []  # if a TB already exists, is because of have several slices.
    for t in filtered_tb:
        if t['block_name'] == memo_tb_name and len(current_tb) < int(max_tb_length):
            current_tb.append(t)
            print( "TB {}: append terminal {}".format(t['block_name'], t['terminal_name']) )
        else:  # TB completed
            current_tb_name = current_tb[0]['block_name']
            tb_done.append( current_tb_name )  
            create_a_TB(tb_name=current_tb[0]['block_name'], \
                    tb=current_tb, \
                    slice_num=tb_done.count( current_tb_name), \
                    tb_splitted=len([1 for x in filtered_tb if x['block_name'] == current_tb_name]) >  max_tb_length, \
                    settings=settings, \
                    qet_project=qet_project )

            # starting the next TB
            current_tb = [t]
            memo_tb_name = current_tb[0]['block_name']
            print( "TB {}: append terminal {}".format(t['block_name'], t['terminal_name']) )

    # Create the last TB
    current_tb_name = current_tb[0]['block_name']
    tb_done.append( current_tb_name )
    create_a_TB(tb_name=current_tb[0]['block_name'], \
        tb=current_tb, \
        slice_num=tb_done.count( t['block_name'] ), \
        tb_splitted=len([1 for x in filtered_tb if x['block_name'] == current_tb_name]) >  max_tb_length, \
        settings=settings, \
        qet_project=qet_project )

    # The Plugin info is saved in the terminal itself.
    qet_project.update_terminals(filtered_tb)

    # save and messaging
    qet_project.save_tb(qet_file)
    msg = ("DONE.\n\n"
           "Reopen the schematic at QElectroTech.\n" \
           "The terminal blocks are under 'Imported elements' collection of your project.\n\n" \
           "Original diagram file saved as:\n{}".format(full_back_path) )      
    sg.popup(msg , title="QET", button_color=('black', 'light green'))


def move_terminal_up(window, row):
    """
    Moves a terminal up one position if is not the first yet.

    @param row: row of the table
    """

    row = int(row)
    if row == 0:
        return
    
    current_row_tb = window['-{}/{}-'.format(2,row)].get()
    previous_row_tb = window['-{}/{}-'.format(2,row-1)].get()
    if current_row_tb != previous_row_tb:
        return

    # exchange columns
    for c in range(3, len(TABLE)):  # col.0 buttons, col.1 position, col.2 block
        foo = window['-{}/{}-'.format(c,row)].get()
        window['-{}/{}-'.format(c,row)].update( window['-{}/{}-'.format(c,row-1)].get() )
        window['-{}/{}-'.format(c,row-1)].update (foo)

    # exchange UUID as metadata on the first field
    foo = window['-1/{}-'.format(row)].metadata
    window['-1/{}-'.format(row)].metadata =  window['-1/{}-'.format(row-1)].metadata 
    window['-1/{}-'.format(row-1)].metadata = foo 



def move_terminal_down(window, row, max_index_row):
    """
    Moves a terminal down one position in the terminal block
    if is not the last yet.

    @param row: row of the table
    @param num_rows: num rows of the table of terminals
    """

    row = int(row)
    if row >= (max_index_row - 1):  # row index starts 0
        return
    
    # not allow to mix terminals between terminal-blocks
    current_row_tb = window['-{}/{}-'.format(2,row)].get()
    next_row_tb = window['-{}/{}-'.format(2,row+1)].get()
    if current_row_tb != next_row_tb:
        return

    # exchange row columns
    for c in range(3, len(TABLE)):  # col.0 buttons, col.1 position, col.2 block
        foo = window['-{}/{}-'.format(c,row)].get()
        window['-{}/{}-'.format(c,row)].update( window['-{}/{}-'.format(c,row+1)].get() )
        window['-{}/{}-'.format(c,row+1)].update (foo)



def alter_bridge(window, cell_key):
    """
    Alter the Bridge cell between blank and |.
    If the value es |, a bridge line will be drawn between the terminal
    and the next one.

    @param cell_key: key of the clicked cell
    """
    loop = {'' : '|', \
            '|':''}
    window[cell_key].update( loop[window[cell_key].get()] )



def alter_type(window, cell_key):
    """
    Alter the Type cell contents between STANDARD, GROUND and FUSE.

    @param cell_key: key of the clicked cell
    """
    loop = {''        : 'STANDARD', \
            'STANDARD': 'GROUND', \
            'GROUND'  : 'FUSE', \
            'FUSE'    : 'STANDARD'}
    window[cell_key].update( loop[window[cell_key].get()] )



def filter_terminals(window, tb_names, max_index_row):
    """
    Shows only the selected terminal-block in the terminals list.
    To hide a row is enough to hide on element in the row layout.
    
    @param tb_names: list of tb names to filter.
    @param num_rows: num rows of the table of terminals
    """

    # Hide all first. If not the order or rows could change
    for row in range(max_index_row):
        id = '-2/{}-'.format(row)  # a random object in the row
        window[id].hide_row()
            

    for row in range(max_index_row):
        id = '-2/{}-'.format(row)
        if window[id].get() in tb_names or ALL in tb_names:
            window[id].unhide_row()



def header_cell(col):
    """
    Customized control for the table header

    @param col: starting by 0
    @return Input element
    """
    return sg.Input(default_text = TABLE[col]['text'], \
            disabled=True, \
            tooltip=TABLE[col]['tip'], \
            enable_events=False, \
            justification='center', \
            background_color= 'gray', \
            size=(TABLE[col]['size'],4), \
            border_width = 1, \
            pad=( (0,0), (0,5) ) 
            )



def table_sort_button(row, dir):
    """
    Customized control for the table sort UP buttonn

    @param row: starting by 0. 'HEAD' for the table HEADER
    @param dir: sort direction 'UP' or 'DW'
    @return Button element
    """
    return sg.Text( text=['▲', '▼'][dir=='DW'], \
            enable_events=[True, False][row=='HEAD'], \
            relief= 'raised', \
            justification='center',\
            text_color=['blue', 'black'][row=='HEAD'], \
            # tooltip= 'Press to move {}'.format(['up', 'down'][dir=='DW']), \
            key='-{}{}-'.format(dir, row), \
            size= ( int(TABLE[0]['size']/2-1), 1), \
            pad=(0,0)
    )



def table_cell(col, row, text = '', metadata='', bgcolor=0):
    """
    Customized control for the table cell. The first row
    are 2 buttons to change Terminals orden in the
    terminal-block.

    @param col: starting by 0
    @param row: roen index starting by 0. 'HEAD' for the table HEADER
    @param text: default cell content
    @param metadata: saves extra info about the terminal
    @param bgcolor: alternate cell background color (0 or 1). 2 for the HEADER color
    @return Input element
    """

    if TABLE[col]['edit'] and row !='HEAD':  # editable field
        return sg.Input(default_text = text, \
                key='-{}/{}-'.format(col,row), \
                disabled = TABLE[col]['disabled'], \
                enable_events=True, \
                background_color = ['white', 'wheat1', 'light gray'][bgcolor], \
                text_color= 'blue', \
                border_width=1, \
                size=(TABLE[col]['size'],1), \
                tooltip='-{}/{}-'.format(col,row), \
                pad=(0,0)
        )
    else:  # no editable field or table header
        disabled = TABLE[col]['disabled'] or row=='HEAD'
        return sg.Text( text=text, \
            enable_events=not disabled, \
            relief= 'raised', \
            justification='center',\
            metadata= metadata, \
            background_color = ['white', 'wheat1', 'light gray'][bgcolor], \
            text_color= ['blue', 'black'][ disabled] , \
            key='-{}/{}-'.format(col,row), \
            size= (TABLE[col]['size'],1), \
            tooltip='-{}/{}-'.format(col,row), \
            pad=(0,0)
        )



def load_settings(window):
    """
    Load setting from config file. If does not exist, set defaults values
    and creates the config file

    @param window: sg window class
    """

    # Get system config path
    config_file = os.path.join(
        os.environ.get('APPDATA') or
        os.environ.get('XDG_CONFIG_HOME') or
        os.path.join(os.environ['HOME'], '.config'),
        CONFIG_FILE
    )

    if os.path.isfile(config_file):
        # load files
        with open(config_file, 'r') as f:
            config = json.load(f)
            for k,v in config.items():
                window[k].update(v)
    else:
        set_default_settings(window)



def set_default_settings(window):
    """
    Fills the settings fields with default values,
    and saves to the config file too.
    """

    # General
    window['-CFG_SPLIT-'].update('30')

    # TB Graphical dimensions
    window['-CFG_A-'].update('120')
    window['-CFG_B-'].update('44')
    window['-CFG_C-'].update('70')
    window['-CFG_D-'].update('6')
    window['-CFG_E-'].update('160')
    window['-CFG_F-'].update('20')
    window['-CFG_G-'].update('50')
    window['-CFG_H-'].update('70')
    window['-CFG_I-'].update('80')
    window['-CFG_J-'].update('70')

    # Font size
    window['-CFG_HEAD_FONT-'].update('13')
    window['-CFG_TERMINAL_FONT-'].update('9')
    window['-CFG_XREF_FONT-'].update('6')
    window['-CFG_CONDUCTOR_FONT-'].update('6')

    # save to config file
    #save_settings()



def save_settings(window):
    """
    Save current setting to file

    @return: If parameters are correct, returns dict of parameters, else {}
    """

    # Get system config path
    config_file = os.path.join(
        os.environ.get('APPDATA') or
        os.environ.get('XDG_CONFIG_HOME') or
        os.path.join(os.environ['HOME'], '.config'),
        CONFIG_FILE
    )

    # Create config and check all are integers
    config = { k:window[k].get() for k in CONFIG_UI_INPUT_FIELDS_KEYS } 
    config_ok=True
    try:
        for v in config.values():
            foo = int(v)
    except:
        config_ok=False

    #save to file
    if config_ok:
        with open(config_file, 'w') as f:
            json.dump(config, f)
        return config
    else:
        sg.popup('Error saving settings.', 'Some values are not integers.')
        return {}


def get_layout(qet_project):
    """
    Return a list of list defining the layout of the main window.
    Creates a fake-table with a number of rows corresponding with
    the teminal-block with more elements.
    The unneeded rows are hidden.

    @param qet_project: instace of a QETProject. Used to get the list
        of terminal-blocks and the max. number or rows needed.
    @return List of list defining the layout.
    """

    # Calc layout parameters
    #rows = qet_project.get_max_tb_length()
    terminals = qet_project.terminals
    rows = len(terminals)
    tb_names = qet_project.tb_names


    # UI General settings area
    general_settings_area =[
        [ 
            sg.T("Show legend", justification='center', enable_events=True, relief= 'raised', key='-BTN_LEGEND-', size=(13,1)), \
            sg.T("Set default settings", justification='center', enable_events=True, relief= 'raised', key='-BTN_DEFAULT-', size=(22,1)), \
        ], \
        [ sg.T('Split terminal block every'), sg.In(key='-CFG_SPLIT-', size=(3,1)), sg.T('terminals.')]
    ]

    # UI Dimensions settings area
    dimensions_settings_area =[

        [ 
          sg.T("A", size=(1,1)), sg.In(key='-CFG_A-', size=(3,1)), \
          sg.T("B", size=(1,1)), sg.In(key='-CFG_B-', size=(3,1)), \
          sg.T("C", size=(1,1)), sg.In(key='-CFG_C-', size=(3,1)), \
          sg.T("D", size=(1,1)), sg.In(key='-CFG_D-', size=(3,1)), \
          sg.T("E", size=(1,1)), sg.In(key='-CFG_E-', size=(3,1)), \
        ], \

        [
          sg.T("F", size=(1,1)), sg.In(key='-CFG_F-', size=(3,1)), \
          sg.T("G", size=(1,1)), sg.In(key='-CFG_G-', size=(3,1)), \
          sg.T("H", size=(1,1)), sg.In(key='-CFG_H-', size=(3,1)), \
          sg.T("I", size=(1,1)), sg.In(key='-CFG_I-', size=(3,1)), \
          sg.T("J", size=(1,1)), sg.In(key='-CFG_J-', size=(3,1))
        ]

    ]


    # UI Font size settings area
    font_size_settings_area =[
        [
          sg.T("Head", size =(12,1)), sg.In(key='-CFG_HEAD_FONT-', size=(3,1)), \
          sg.T("Terminal ID",size =(12,1)), sg.In(key='-CFG_TERMINAL_FONT-', size=(3,1))
        ], \

        [ 
          sg.T("Conductors", size =(12,1)), sg.In(key='-CFG_CONDUCTOR_FONT-', size=(3,1)), \
          sg.T("Cross ref.", size =(12,1)), sg.In(key='-CFG_XREF_FONT-', size=(3,1))
        ]
    ]


    # UI List terminals
    tb_list =[
        [ sg.T("Filter Terminal blocks", text_color='black') ],

        [ sg.Listbox(values=[ALL] + tb_names, \
                default_values=[ALL], \
                size=(20,17), \
                enable_events=True, \
                key='-TB-')
        ],

        [ sg.Button("Create Term. Blocks...", key='-OK-') ],
        [ sg.Button("Help...", key='-HELP-') ]
    ]


    # UI Fake table HEADER
    terminals_table = [  ]

    row =  [ table_sort_button('HEAD', 'UP') ]
    row += [ table_sort_button('HEAD', 'DW') ]
    cells = []
    for c in range(1,len(TABLE)):  # cols
        cells += [ table_cell(c, 'HEAD', text=TABLE[c]['text'], metadata=TABLE[c]['tip'], bgcolor = 2) ]
    row += cells
    terminals_table.append( row )


    # UI Fake table CONTENT
    back_color = 0; memo_block_name = ''  # for colorize cells of same terminal-block
    i = 0  # recorrer filas terminales
    
    for r in range(rows):  # rows
        row =  [ table_sort_button(r, 'UP') ]
        row += [ table_sort_button(r, 'DW') ]
        cells = []
    
        for c in range(1,len(TABLE)):  # cols
            if terminals[i]['block_name'] != memo_block_name:
                back_color = 1 - back_color
                memo_block_name = terminals[i]['block_name']

            if c == 1:  # the firs cell saves UUID
                meta = terminals[i]['uuid']
            text = terminals[i][TABLE[c]['key']]
            cells += [ table_cell(c, r, text=text, metadata=meta, bgcolor = back_color) ]

        i += 1  # new row in the terminals from project
        row += cells
        terminals_table.append( row )


    # UI Final layout
    return [ 
            # Section 1
            [
                sg.Frame("General settings", layout = general_settings_area, vertical_alignment='top'), \
                sg.Frame("Dimensions settings", layout = dimensions_settings_area, vertical_alignment='top'), \
                sg.Frame("Font size settings", layout = font_size_settings_area, vertical_alignment='top') 
            ], \
            
            # Warning
            [sg.T("Remember to save the QET project before using this plug-in.", text_color='red')], \

            # Separator
            [ sg.HorizontalSeparator(pad=(0,10)) ], \

            # Section 2
            [ 
                sg.Column(tb_list, expand_y=True), 
                sg.VSeperator(),
                sg.Column(terminals_table,scrollable=True, vertical_scroll_only=True, expand_y=True)
            ]
        ]


def main():

    global qet_file, edited_terminals


    # logging
    initialize_logger()
    log.info (TITLE)

    # QET file project
    qet_file = get_QET_fullpath( os.path.expanduser("~") )
    # qet_file = "/home/raul/Downloads/sample.qet"
    # qet_file = "/home/raul/Nextcloud/Proyectos/QET_Terminal_Block/current_v1.2/sample_projects/achim_bugs/Basic.qet"
    # qet_file = get_QET_fullpath( "/home/raul/Downloads/sample.qet" )

    if not qet_file:
        exit()

    # QET Project
    qet_project = QETProject(qet_file)  # allows working with a QET XML file.

    # UI
    sg.theme (THEME)
    #print = sg.EasyPrint  # print to a window
    sg.popup_quick_message('Reading data...',' ','  ', \
            title=TITLE, auto_close=True, non_blocking=True)
    layout = get_layout(qet_project)
    window = sg.Window(TITLE, layout, icon = ICON,  resizable=True, size=(1000,500))

    
    # Gestión eventos
    initialized = False

    while True:
        # Read and load settings
        if not initialized:
            event, values = window.read(timeout=10)
            load_settings(window)
            initialized = True

        event, values = window.read()
        #print ('Event: {}'.format(event))
        #print (values)

        if event == sg.WIN_CLOSED:
            break
        
        elif event == '-OK-':
            settings = save_settings(window)
            if settings:  # settings are OK
                choosed = choose_tb_to_create(tb_names=qet_project.tb_names, edited_terminals=edited_terminals)
                create_terminal_blocks(window, choosed, int(window['-CFG_SPLIT-'].get()), \
                            settings, qet_project)
        elif event == '-BTN_LEGEND-':  # show legend picture
            e, v = sg.Window('Terminal-block legend',
                        [
                        [sg.Image(data = LEGEND_PICTURE)],
                        [sg.B('OK')]
                        ]).read(close=True)

        elif event.startswith('-UP'):  # move terminal up
            row =  event[3:-1]
            move_terminal_up(window, row = row)
            add_to_edited_tb( edited_terminals, tb_name=window['-2/{}-'.format(row)].get() )


        elif event.startswith('-DW'):  #move terminal down
            row = event[3:-1]
            move_terminal_down(window, row = row, 
                    max_index_row = len(qet_project.terminals))
            add_to_edited_tb ( edited_terminals, tb_name=window['-2/{}-'.format(row)].get() )
        
        elif event == '-TB-':   # click on filter list
            filter_terminals(window, values['-TB-'], \
                    max_index_row = len(qet_project.terminals))
        
        elif event.startswith('-6/'):  # click en BRIDGE column
            row = event[3:-1]
            alter_bridge (window, event)
            add_to_edited_tb ( edited_terminals, tb_name=window['-2/{}-'.format(row)].get() )
        
        elif event.startswith('-7/'):  # click en TYPE column
            row = event[3:-1]
            alter_type (window, event)
            add_to_edited_tb ( edited_terminals, tb_name=window['-2/{}-'.format(row)].get() )

        elif event.startswith('-8/'):  # HOSE cell
            row = event[3:-1]
            add_to_edited_tb ( edited_terminals, tb_name=window['-2/{}-'.format(row)].get() )

        elif event.startswith('-9/'):  # click en TYPE column
            row = event[3:-1]
            add_to_edited_tb ( edited_terminals, tb_name=window['-2/{}-'.format(row)].get() )

        elif event == '-BTN_DEFAULT-':
            set_default_settings(window)
        
        elif event == '-HELP-':
            sg.popup(HELP , title="QET")


if __name__ == "__main__":
    main()